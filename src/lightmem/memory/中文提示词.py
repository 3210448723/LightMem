# 说明：
# 本文件定义了用于大模型调用的提示词模板：
# - METADATA_GENERATE_PROMPT：用于从分段后的对话消息中抽取用户相关的事实信息；
# - UPDATE_PROMPT：用于离线更新阶段，决定目标记忆的“更新/删除/忽略”。
#
# 注意：不要修改字符串字面量内容，以免影响提示词效果；如需调整规则，请在上层配置中控制。

METADATA_GENERATE_PROMPT = """
你是一名个人信息提取器。
你的任务是从对话中提取**所有可能的用户相关事实或信息**，
对话会按主题分段展示，分段标记格式如下：

--- 主题 1 ---
1.用户：<消息内容>
2.用户：<消息内容>
--- 主题 2 ---
3.用户：<消息内容>
...

重要说明：
0. 你必须**严格按照消息序号升序**处理（从最小到最大）。每条消息处理前，需**仔细**评估内容后再进行下一条。禁止重新排序、批量跳过或提前跳转，需逐条处理消息。
1. 你必须按顺序逐条处理所有用户消息。
   对每条消息，判断是否包含事实信息。
   - 若是 → 提取信息并改写为独立完整的句子。
   - 若否（纯问候、填充语或无关言论） → 跳过。
   - 不得因信息看似琐碎、细微或不重要而跳过。
     即使是小细节（如“用户今早喝了咖啡”）也需保留。
     仅当消息*完全*无意义时（如“嗨”“哈哈”“谢谢”）方可跳过。
2. 进行轻度上下文补全，确保每条事实都是清晰的独立陈述。 Todo: 句子完整，主谓宾完整，动作发出对象和作用对象明确。
   补全示例：
     - “用户：昨天买了苹果” → “用户昨天买了苹果。”
     - “用户：我的朋友约翰在学医” → “用户的朋友约翰在学医。”
3. 将消息前的“序号”（整数前缀）作为 `source_id`。
4. 输出格式：
   始终返回一个 JSON 对象，包含键名 `"data"`，其值为列表形式：
   {
     "source_id": "<序号>",
     "fact": "<补全后的独立事实句子>"
   }

示例：

--- 主题 1 ---
0.用户：我叫爱丽丝，是一名教师。
2.用户：我最喜欢的电影是《盗梦空间》和《星际穿越》。
--- 主题 2 ---
4.用户：去年夏天去了巴黎。
{"data": [
  {"source_id": 0, "fact": "用户名叫爱丽丝。"},
  {"source_id": 0, "fact": "用户是一名教师。"},
  {"source_id": 2, "fact": "用户最喜欢的电影是《盗梦空间》和《星际穿越》。"},
  {"source_id": 4, "fact": "用户去年夏天去了巴黎。"}
]}

--- 主题 x --- 
10.用户：嗨。
12.用户：你太棒了！
{"data": []}

提醒：提取需全面。除非消息完全无意义，否则均需提取为事实并输出。
"""

# METADATA_GENERATE_PROMPT = """
# 你是一名个人信息提取器。
# 你的任务是从对话中提取用户的有效事实信息，
# 对话会按主题分段展示，分段标记格式如下：

# --- 主题 1 ---
# 1.用户：<消息内容>
# 2.用户：<消息内容>
# --- 主题 2 ---
# 3.用户：<消息内容>
# ...

# 指导原则：
# - 忽略主题标记（如“--- 主题 1 ---”），它们仅为结构分隔符。
# - 按顺序处理消息，从最小序号到最大序号。
#   每条消息均需判断是否包含值得提取的事实。
# - 将消息前的“序号”（整数前缀）作为提取事实的 `source_id`。
# - 提取所有与用户身份、偏好、意图、计划、活动或观点相关的**可能事实**。
# - 仅当消息仅包含无关填充内容时方可跳过，例如问候语（“嗨”）、赞美（“你太棒了”）或无意义回应（“好的”）。
# - 包含具体信息的消息，即使看似琐碎或重复，也不得跳过。
# - 始终将提取的事实改写为完整的独立句子，并进行轻度上下文补全。
#   示例：
#     - “用户：最喜欢的电影是《盗梦空间》和《星际穿越》” → “用户最喜欢的电影是《盗梦空间》和《星际穿越》”
#     - “用户：能帮我找一家附近不错的意大利餐厅吗？” → “用户正在寻找附近不错的意大利餐厅”
#     - “用户：我的朋友约翰在德国学医。” → “用户的朋友约翰在德国学医”

# 输出要求：
# - 始终返回一个 JSON 对象，仅包含键名 "data"。
# - "data" 为提取结果列表，每个元素为 JSON 对象，格式如下：
#   {
#     "source_id": "<提取该事实的消息序号>",
#     "fact": "<补全后的独立事实句子>"
#   }

# 示例：

# --- 主题 1 ---
# 1.用户：我叫爱丽丝，是一名教师。
# 2.用户：我最喜欢的电影是《盗梦空间》和《星际穿越》。
# --- 主题 2 ---
# 3.用户：去年夏天去了巴黎。
# {"data": [
#   {"source_id": 1, "fact": "用户名叫爱丽丝"},
#   {"source_id": 1, "fact": "用户是一名教师"},
#   {"source_id": 2, "fact": "用户最喜欢的电影是《盗梦空间》和《星际穿越》"},
#   {"source_id": 3, "fact": "用户去年夏天去了巴黎"}
# ]}

# --- 主题 1 ---
# 10.用户：能帮我找一家附近不错的意大利餐厅吗？
# --- 主题 2 ---
# 11.用户：我的朋友约翰在德国学医。
# {"data": [
#   {"source_id": 10, "fact": "用户正在寻找附近不错的意大利餐厅"},
#   {"source_id": 11, "fact": "用户的朋友约翰在德国学医"}
# ]}

# --- 主题 x --- 
# 1023.用户：嗨。
# 1024.用户：你太棒了！
# {"data": []}

# 重要提示：
# - 必须按顺序仔细处理每条消息。
# - 仅当消息确实无意义时，方可跳过事实提取。
# - 提取的事实总数应接近有效用户消息的数量。
# """

# METADATA_GENERATE_PROMPT = """
# 你是一名个人信息提取器。
# 你的任务是从对话中提取用户的有效事实信息，
# 对话会按主题分段展示，分段标记格式如下：

# --- 主题 1 ---
# 1.用户：<消息内容>
# 2.用户：<消息内容>
# --- 主题 2 ---
# 3.用户：<消息内容>
# ...

# 指导原则：
# - 忽略主题标记（如“--- 主题 1 ---”），它们仅为结构分隔符。
# - 将消息前的“序号”（整数前缀）作为提取事实的 `source_id`。
# - 仅提取与用户相关的有效身份信息、事实、观点、偏好、意图或计划。
# - 始终进行轻度上下文补全，确保每条事实都是清晰的独立句子。
#   补全示例：
#     - “用户：最喜欢的电影是《盗梦空间》和《星际穿越》” → “用户最喜欢的电影是《盗梦空间》和《星际穿越》”
#     - “用户：能帮我找一家附近不错的意大利餐厅吗？” → “用户正在寻找附近不错的意大利餐厅”
#     - “用户：我的朋友约翰在德国学医。” → “用户的朋友约翰在德国学医”
# - 事实需保留与输入消息一致的语言，但需表述为完整的独立陈述。
# - 若未找到相关事实（如仅包含问候语、赞美、填充语或无关评论），返回 {{"data": []}}。

# 输出要求：
# - 始终返回一个 JSON 对象，仅包含键名 "data"。
# - "data" 为提取结果列表，每个元素为 JSON 对象，格式如下：
#   {{
#     "source_id": "<提取该事实的消息序号>",
#     "fact": "<补全后的独立事实句子>"
#   }}

# 示例：

# --- 主题 1 ---
# 1.用户：我叫爱丽丝，是一名教师。
# 2.用户：我最喜欢的电影是《盗梦空间》和《星际穿越》。
# --- 主题 2 ---
# 3.用户：去年夏天去了巴黎。
# {{"data": [
#   {{"source_id": 1, "fact": "用户名叫爱丽丝"}},
#   {{"source_id": 1, "fact": "用户是一名教师"}},
#   {{"source_id": 2, "fact": "用户最喜欢的电影是《盗梦空间》和《星际穿越》"}},
#   {{"source_id": 3, "fact": "用户去年夏天去了巴黎"}}
# ]}}

# --- 主题 1 ---
# 10.用户：能帮我找一家附近不错的意大利餐厅吗？
# --- 主题 2 ---
# 11.用户：我的朋友约翰在德国学医。
# {{"data": [
#   {{"source_id": 10, "fact": "用户正在寻找附近不错的意大利餐厅"}},
#   {{"source_id": 11, "fact": "用户的朋友约翰在德国学医"}}
# ]}}

# --- 主题 1 ---
# 1023.用户：嗨。
# 1024.用户：你太棒了！
# {"data": []}

# 以下是部分对话，请根据上述要求提取用户相关信息（若有），并按示例格式返回 JSON 结果。

# """

# METADATA_GENERATE_PROMPT = f"""
# 你是一名个人信息提取器兼对话分类器。
# 你的任务是从对话中提取用户的有效事实信息，并为每条事实分配类别、子类别。

# 类别划分：
# 1. 与用户相关
#    - 身份信息：个人基础信息、人际关系、社会属性
#    - 客观事实：与用户相关的客观事实、过往事件、环境状态
#    - 计划与意图：请求、问题、短期或长期目标
#    - 观点态度：用户表达的主观看法、价值观、情绪
#    - 偏好倾向：用户的兴趣爱好、习惯、互动风格
# 2. 与他人相关：关于其他人的信息（身份、事实、计划、观点、偏好）
# 3. 通用知识：不针对特定个人的普遍常识
# 4. 无意义内容：问候语、赞美、填充语、无关评论

# 输出要求：
# - 始终返回一个 JSON 对象，仅包含键名 "data"。
# - "data" 为提取结果列表，每个元素为 JSON 对象，格式如下：
#   {
#     "source_id": "<提取该事实的消息序号（整数）>",
#     "fact": "<提取的事实，与用户输入语言一致>",
#     "": "<与用户相关 | 与他人相关 | 通用知识 | 无意义内容>",category
#     "subcategory": "<身份信息 | 客观事实 | 计划与意图 | 观点态度 | 偏好倾向 | 无>",
#   }
# - 若未找到相关事实，返回 {"data": []}。

# 示例：

# 1.用户：我最喜欢的电影是《盗梦空间》和《星际穿越》。
# {"data": [
#   {"source_id": 1, "fact": "最喜欢的电影是《盗梦空间》和《星际穿越》", "category": "与用户相关", "subcategory": "偏好倾向"}
# ]}

# 66.用户：我叫爱丽丝，是一名教师。\n67.用户：去年夏天去了巴黎。
# {"data": [
#   {"source_id": 66, "fact": "名叫爱丽丝", "category": "与用户相关", "subcategory": "身份信息"},
#   {"source_id": 66, "fact": "是一名教师", "category": "与用户相关", "subcategory": "身份信息"},
#   {"source_id": 67, "fact": "去年夏天去了巴黎", "category": "与用户相关", "subcategory": "客观事实"}
# ]}

# 523.用户：能帮我找一家附近不错的意大利餐厅吗？
# {"data": [
#   {"source_id": 523, "fact": "正在寻找附近不错的意大利餐厅", "category": "与用户相关", "subcategory": "计划与意图"}
# ]}

# 36.用户：我的朋友约翰在德国学医。
# {"data": [
#   {"source_id": 36, "fact": "朋友约翰在德国学医", "category": "与他人相关", "subcategory": "客观事实"}
# ]}

# 108.用户：水在100摄氏度时沸腾。
# {"data": [
#   {"source_id": 108, "fact": "水在100摄氏度时沸腾", "category": "通用知识", "subcategory": "无"}
# ]}

# 1023.用户：嗨。\n1024.用户：你太棒了！
# {"data": []}
# """

UPDATE_PROMPT = """
你是一名记忆管理助手。
你的任务是根据候选源记忆，判断目标记忆应执行更新、删除还是忽略操作。

决策规则：
1. 更新：若目标记忆与候选源记忆描述的是同一事实/事件，但内容不完全一致（如候选记忆提供更多细节、补充说明或澄清信息），则整合新增信息更新目标记忆。
2. 删除：若目标记忆与候选源记忆存在直接冲突，以更新时间更新的候选源记忆为准，删除目标记忆。
3. 忽略：若目标记忆与候选源记忆无关，无需执行任何操作，忽略即可。

补充指引：
- 仅使用提供的信息，不得编造细节。
- 操作始终作用于目标记忆，不得修改或修正候选源记忆中的内容。

输出必须为 JSON 对象，格式如下：
{
  "action": "update" | "delete" | "ignore",
  "new_memory": { ... }   // 仅当 action = "update" 时必填
}

示例 1：
目标记忆："用户喜欢喝咖啡。"
候选源记忆：
- "用户早上更喜欢卡布奇诺。"
- "用户加班到很晚时有时会喝浓缩咖啡。"
- "用户不喝低因咖啡。"

输出：
{
  "action": "update",
  "new_memory": "用户喜欢喝咖啡，尤其喜欢早上喝卡布奇诺、加班到很晚时喝浓缩咖啡，且不喝低因咖啡。"
}

示例 2：
目标记忆："用户喜欢玩电子游戏。"
候选源记忆：
- "用户主要玩策略类游戏。"
- "用户经常在周末和朋友一起打游戏。"
- "用户以前喜欢益智类游戏，但现在没那么喜欢了。"

输出：
{
  "action": "update",
  "new_memory": "用户喜欢玩电子游戏，主要玩策略类游戏，经常在周末和朋友一起玩，以前喜欢益智类游戏但现在没那么喜欢了。"
}

示例 3：
目标记忆："用户目前住在纽约。"
候选源记忆：
- "用户2023年搬到了旧金山。"
- "用户提到喜欢湾区的天气。"
- "用户的新工作地点在旧金山市区。"

输出：
{
  "action": "delete"
}

示例 4：
目标记忆："用户正在学习做意大利菜。"
候选源记忆：
- "用户最近开始练习瑜伽。"
- "用户买了一辆新自行车通勤。"
- "用户喜欢看科幻电影。"

输出：
{
  "action": "ignore"
}

以下是新的目标记忆及对应的多条候选源记忆，请根据上述规则判断应执行的操作（更新、删除或忽略）。

"""